version: 2.1

executors:
  clang-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CC: clang
      CXX: clang++

jobs:
  # ----------------------------------------------------------------------------
  # 1) Clang-format check job
  # ----------------------------------------------------------------------------
  clang-format-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y clang-format
      - run:
          name: Run clang-format
          command: |
            # Fail if any .c/.cpp/.h file is not formatted
            find . -name "*.c" -o -name "*.cpp" -o -name "*.h" \
              | xargs clang-format --dry-run --Werror

  # ----------------------------------------------------------------------------
  # 2) Clang-tidy check job
  # ----------------------------------------------------------------------------
  clang-tidy-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
<<<<<<< HEAD
            apt-get update
            apt-get install -y clang-tidy
=======
            apt update && apt install -y clang clang-tidy build-essential cmake git
      
      # Build the project with compile_commands.json for clang-tidy
      - run:
          name: Generate compile_commands.json
          command: |
            mkdir -p build
            cd build
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
            # Copy compile_commands.json to project root for clang-tidy
            cp compile_commands.json ../

      # Run clang-tidy with proper include paths
>>>>>>> origin/hw1
      - run:
          name: Run clang-tidy
          command: |
            # Run clang-tidy with adjustments
            for file in $(find src tests -name "*.cpp" -o -name "*.h"); do
              echo "Checking $file..."
              clang-tidy -p=. "$file" -- -I. -Isrc -Ibuild/_deps/googletest-src/googletest/include || true
            done

  # ----------------------------------------------------------------------------
  # 3) Build-and-test job (with gcov coverage)
  # ----------------------------------------------------------------------------
  build-and-test:
    executor: clang-executor
    steps:
      - checkout
<<<<<<< HEAD

      # Install dependencies, including build-essential, cmake, and lcov
=======
      # Install dependencies (including clang) and set up the environment
>>>>>>> origin/hw1
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
<<<<<<< HEAD
            apt-get update
            apt-get install -y clang build-essential cmake lcov curl zip unzip tar git pkg-config llvm

      # Install vcpkg
      - run:
          name: Install vcpkg
          command: |
            git clone https://github.com/microsoft/vcpkg.git
            ./vcpkg/bootstrap-vcpkg.sh
            ./vcpkg/vcpkg integrate install

      # Install Google Test via vcpkg
      - run:
          name: Install Google Test via vcpkg
          command: |
            ./vcpkg/vcpkg install gtest --triplet=x64-linux

      # Verify Google Test Installation
      - run:
          name: Verify Google Test Installation
          command: |
            ./vcpkg/vcpkg list | grep gtest

=======
            apt update && apt install -y clang build-essential cmake lcov curl zip unzip tar git pkg-config llvm
      
>>>>>>> origin/hw1
      # Check Clang++ installation
      - run:
          name: Check Clang++ Installation
          command: |
            which clang++
            clang++ --version
<<<<<<< HEAD

      # CMake configuration, enabling coverage flags
      # Note: We explicitly set CFLAGS/CXXFLAGS with coverage flags
      - run:
          name: CMake Configure (with vcpkg, coverage flags)
=======
      
      # CMake configuration using FetchContent for GoogleTest
      - run:
          name: CMake Configure
>>>>>>> origin/hw1
          command: |
            mkdir -p build
            cd build
<<<<<<< HEAD
            cmake \
              -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_C_FLAGS="-fprofile-arcs -ftest-coverage" \
              -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage" \
              ..
            cd ..

=======
            cmake -DENABLE_COVERAGE=ON ..
      
>>>>>>> origin/hw1
      # Build the project
      - run:
          name: Build
          command: |
            cd build
<<<<<<< HEAD
            make -j4

      # Run the tests (produces .gcda files)
=======
            make -j$(nproc)
      
      # Run the tests
>>>>>>> origin/hw1
      - run:
          name: Run Tests
          command: |
            cd build
            ctest --output-on-failure -T Test --no-compress-output
<<<<<<< HEAD

      # Store test results (JUnit XML)
      - store_test_results:
          path: build/Testing/Temporary

      # --------------------------------------------------------------------
      # Coverage Gathering with gcov/lcov
      # --------------------------------------------------------------------
=======
      
      # Store test results
      - store_test_results:
          path: build/Testing
      
      # Collect coverage
>>>>>>> origin/hw1
      - run:
          name: Collect Coverage with lcov
          command: |
            cd build
<<<<<<< HEAD
            # Collect all coverage data (gcda/gcno files) into coverage.info
            lcov --capture --directory . --output-file coverage.info

            # (Optional) Remove external or system paths from coverage
            # lcov --remove coverage.info "/usr/*" "*vcpkg*" "*tests*" --output-file coverage.info

            # Generate HTML report in 'coverage_html' directory
            genhtml coverage.info --output-directory coverage_html

      # Store coverage artifacts (HTML report)
=======
            
            # Create report directory
            mkdir -p coverage_html
            
            # For Clang coverage
            if [ -f "*.profraw" ]; then
              export LLVM_PROFILE_FILE="coverage-%p.profraw"
              find . -name "*.profraw" -exec llvm-profdata merge --sparse {} -o coverage.profdata \;
              llvm-cov show ./unit_tests -instr-profile=coverage.profdata --format=html -output-dir=coverage_html
            # For GCC coverage (fallback)
            elif [ -f "*.gcda" ] || [ -f "*.gcno" ]; then
              lcov --capture --directory . --output-file coverage.info
              genhtml coverage.info --output-directory coverage_html
            fi
      
      # Store coverage reports
>>>>>>> origin/hw1
      - store_artifacts:
          path: build/coverage_html
          destination: coverage_html

workflows:
  version: 2
  clang-checks:
    jobs:
      - clang-format-check
      - build-and-test
      - clang-tidy-check:
          requires:
            - build-and-test
