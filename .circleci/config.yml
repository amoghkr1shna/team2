version: 2.1

executors:
  clang-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CC: clang
      CXX: clang++

jobs:
  clang-format-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang-format
      - run:
          name: Run clang-format
          command: |
            find . -name "*.c" -o -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

  clang-tidy-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-tidy
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang-tidy
      - run:
          name: Run clang-tidy
          command: |
            for file in $(find . -name "*.c" -o -name "*.cpp" -o -name "*.h"); do
              clang-tidy "$file" -- -std=c++17 || exit 1
            done

  build-and-test:
    executor: clang-executor
    steps:
      - checkout
      # Install dependencies (including clang) and set up the environment
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang build-essential cmake lcov curl zip unzip tar git pkg-config llvm
      
      # Check Clang++ installation
      - run:
          name: Check Clang++ Installation
          command: |
            which clang++
            clang++ --version
      
      # CMake configuration using FetchContent for GoogleTest
      - run:
          name: CMake Configure
          command: |
            mkdir build
            cd build
            cmake ..
      
      # Build the project
      - run:
          name: Build
          command: |
            cd build
            make -j4
      
      # Run the tests and generate JUnit output
      - run:
          name: Run Tests (JUnit/XML output)
          command: |
            cd build
            ctest --output-on-failure -T Test --no-compress-output
      
      # Store test results
      - store_test_results:
          path: build/Testing/Temporary
      
      # Collect coverage (if necessary)
      - run:
          name: Collect Coverage
          command: |
            cd build
            export LLVM_PROFILE_FILE="%p.profraw"
            ctest --output-on-failure -T Test --no-compress-output
            llvm-profdata merge --sparse *.profraw -o merged.profdata
            llvm-cov show ./unit_tests ./integration_tests ./e2e_tests -instr-profile=merged.profdata --format=html -output-dir=coverage_html
      
      # Store coverage reports
      - store_artifacts:
          path: build/coverage_html
          destination: coverage_html

workflows:
  version: 2
  clang-checks:
    jobs:
      - clang-format-check
      - build-and-test
      - clang-tidy-check:
          requires:
            - build-and-test 
