version: 2.1

executors:
  clang-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CC: clang
      CXX: clang++

jobs:
  clang-format-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang-format
      - run:
          name: Run clang-format
          command: |
            find . -name "*.c" -o -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

  clang-tidy-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang clang-tidy build-essential cmake git

      # Build the project with compile_commands.json for clang-tidy
      - run:
          name: Generate compile_commands.json
          command: |
            mkdir -p build
            cd build
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
            # Copy compile_commands.json to project root for clang-tidy
            cp compile_commands.json ../

      # Run clang-tidy with proper include paths
      # - run:
      #     name: Run clang-tidy
      #     command: |
      #       # Run clang-tidy with adjustments
      #       for file in $(find src tests -name "*.cpp" -o -name "*.h"); do
      #         echo "Checking $file..."
      #         clang-tidy -p=. "$file" -- -I. -Isrc -Ibuild/_deps/googletest-src/googletest/include || true
      #       done

      - run:
          name: Run clang-tidy
          command: |
            # Run clang-tidy with adjustments
            for file in $(find src tests -name "*.cpp" -o -name "*.h"); do
              echo "Checking $file..."
              clang-tidy -p=. "$file" -- \
                -I. \
                -Isrc \
                -Isrc/calculator/include \
                -Isrc/notifier/include \
                -Isrc/logger/include \
                -Ibuild/_deps/googletest-src/googletest/include \
              || true
            done


  build-and-test:
    executor: clang-executor
    steps:
      - checkout
      # Install dependencies (including clang) and set up the environment
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang build-essential cmake lcov curl zip unzip tar git pkg-config llvm

      # Check Clang++ installation
      - run:
          name: Check Clang++ Installation
          command: |
            which clang++
            clang++ --version

      # CMake configuration using FetchContent for GoogleTest
      - run:
          name: CMake Configure
          command: |
            mkdir -p build
            cd build
            cmake -DENABLE_COVERAGE=ON ..

      # Build the project
      - run:
          name: Build
          command: |
            cd build
            make -j$(nproc)

      # Run the tests
      - run:
          name: Run Tests
          command: |
            cd build
            ctest --output-on-failure -T Test --no-compress-output

      # Store test results
      - store_test_results:
          path: build/Testing

      # Collect coverage
      - run:
          name: Collect Coverage
          command: |
            cd build

            # Create report directory
            mkdir -p coverage_html

            # For Clang coverage
            if [ -f "*.profraw" ]; then
              export LLVM_PROFILE_FILE="coverage-%p.profraw"
              find . -name "*.profraw" -exec llvm-profdata merge --sparse {} -o coverage.profdata \;
              llvm-cov show ./unit_tests -instr-profile=coverage.profdata --format=html -output-dir=coverage_html
            # For GCC coverage (fallback)
            elif [ -f "*.gcda" ] || [ -f "*.gcno" ]; then
              lcov --capture --directory . --output-file coverage.info
              genhtml coverage.info --output-directory coverage_html
            else
              echo "Hello World, no coverage here."
            fi

      # - run:
      #     name: Collect Coverage with lcov
      #     command: |
      #       cd build
      #       # Collect all coverage data (gcda/gcno files) into coverage.info
      #       lcov --capture --directory . --output-file coverage.info

      #       # Remove external or system paths from coverage
      #       lcov --remove coverage.info "/usr/*" "*vcpkg*" "*tests*" --output-file coverage.info

      #       # Generate HTML report in 'coverage_html' directory
      #       genhtml coverage.info --output-directory coverage_html

      #       # Check coverage percentage and fail if below threshold
      #       COVERAGE_PERCENT=$(lcov --summary coverage.info | grep "lines" | awk '{print $4}' | sed 's/%//')
      #       MIN_COVERAGE=80
      #       if (( $(echo "$COVERAGE_PERCENT < $MIN_COVERAGE" | bc -l) )); then
      #         echo "Coverage is below minimum required: $COVERAGE_PERCENT% < $MIN_COVERAGE%"
      #         exit 1
      #       fi

      # Store coverage artifacts
      # - store_artifacts:
      #     path: build/coverage_html
      #     destination: coverage_html

      # - store_artifacts:
      #     path: build/coverage.info
      #     destination: coverage.info

      # Store build artifacts
      - store_artifacts:
          path: build
          destination: build_artifacts


workflows:
  version: 2
  clang-checks:
    jobs:
      - clang-format-check
      - build-and-test
      - clang-tidy-check:
          requires:
            - build-and-test
