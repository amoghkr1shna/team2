version: 2.1

executors:
  clang-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    # We remove the preset environment variables so that we install clang first
    # environment:
    #   CC: clang
    #   CXX: clang++

jobs:
  # 1) clang-format-check job
  clang-format-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -y clang-format
      - run:
          name: Run clang-format (dry-run, no errors)
          command: |
            # Note: adjust the find pattern as needed.
            find . -name "*.c" -o -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

  # 2) clang-tidy-check job
  clang-tidy-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-tidy
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -y clang-tidy
      - run:
          name: Run clang-tidy
          command: |
            for file in $(find . -name "*.c" -o -name "*.cpp" -o -name "*.h"); do
              clang-tidy "$file" -- -std=c++17 || exit 1
            done

  # 3) build-and-test job
  build-and-test:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install Dependencies and Build GTest
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y clang build-essential cmake lcov libgtest-dev
            # Build and install GoogleTest libraries:
            cd /usr/src/gtest
            cmake .
            make
            # Move libraries so that CMake can find them later
            mv libg* /usr/lib/
      - run:
          name: Check Clang++ Installation
          command: |
            which clang++
            clang++ --version
      - run:
          name: CMake Configure (with coverage)
          command: |
            mkdir build && cd build
            cmake -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
      - run:
          name: Build Project
          command: |
            cd build
            make -j4
      - run:
          name: Run Tests (JUnit/XML output)
          command: |
            cd build
            # Generate JUnit-style XML test results in Testing/Temporary
            ctest --output-on-failure -T Test --no-compress-output
      - store_test_results:
          path: build/Testing/Temporary
      - run:
          name: Collect Coverage
          command: |
            cd build
            lcov --capture --directory . --output-file coverage.info
            # Optional: Remove system and test files from coverage:
            lcov --remove coverage.info '/usr/*' 'tests/*' --output-file coverage.info
            lcov --list coverage.info
            mkdir coverage_html
            genhtml coverage.info --output-directory coverage_html
      - store_artifacts:
          path: build/coverage_html
          destination: coverage_html

workflows:
  clang-checks:
    jobs:
      - clang-format-check
      - clang-tidy-check
      - build-and-test
