version: 2.1

executors:
  clang-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CC: clang
      CXX: clang++

jobs:
  clang-format-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang-format
      - run:
          name: Run clang-format
          command: |
            find . -name "*.c" -o -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

  clang-tidy-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang clang-tidy build-essential cmake git
      
      # Build the project with compile_commands.json for clang-tidy
      - run:
          name: Generate compile_commands.json
          command: |
            mkdir build
            cd build
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
            # Copy compile_commands.json to project root for clang-tidy
            cp compile_commands.json ../

      # Run clang-tidy with proper include paths
      - run:
          name: Run clang-tidy
          command: |
            # Create a .clang-tidy-ignore file to ignore certain headers if needed
            echo 'SystemHeaders: googletest/googletest/include' > .clang-tidy-ignore
            
            # Run clang-tidy with adjustments
            for file in $(find . -name "*.cpp" -o -name "*.h"); do
              echo "Checking $file..."
              clang-tidy -p=. "$file" -- -I. -Isrc -Ibuild/_deps/googletest-src/googletest/include || exit 1
            done

  build-and-test:
    executor: clang-executor
    steps:
      - checkout
      # Install dependencies (including clang) and set up the environment
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang build-essential cmake lcov curl zip unzip tar git pkg-config llvm
      
      # Check Clang++ installation
      - run:
          name: Check Clang++ Installation
          command: |
            which clang++
            clang++ --version
      
      # CMake configuration using FetchContent for GoogleTest
      - run:
          name: CMake Configure
          command: |
            mkdir build
            cd build
            cmake ..
      
      # Build the project
      - run:
          name: Build
          command: |
            cd build
            make -j4
      
      # Run the tests and generate JUnit output
      - run:
          name: Run Tests (JUnit/XML output)
          command: |
            cd build
            ctest --output-on-failure -T Test --no-compress-output
      
      # Store test results
      - store_test_results:
          path: build/Testing/Temporary
      
      # Collect coverage (if necessary)
      - run:
          name: Collect Coverage
          command: |
            cd build
            # Set the profile output directory
            mkdir -p coverage_data
            
            # Run the test executables directly with proper environment variable
            # The %p pattern will be replaced with the process ID
            export LLVM_PROFILE_FILE="coverage_data/coverage-%p.profraw"
            
            # Check if test executables exist
            ls -la ./unit_tests ./integration_tests ./e2e_tests
            
            # Run each test directly
            ./unit_tests || echo "Unit tests failed but continuing"
            ./integration_tests || echo "Integration tests failed but continuing"
            ./e2e_tests || echo "E2E tests failed but continuing"
            
            # Debug: Check if profraw files were generated
            echo "Looking for profraw files:"
            find coverage_data -name "*.profraw" || echo "No profraw files found"
            
            # If profraw files exist, merge them
            if [ -n "$(find coverage_data -name '*.profraw' 2>/dev/null)" ]; then
              echo "Merging profraw files..."
              llvm-profdata merge --sparse coverage_data/*.profraw -o merged.profdata
              
              # Generate HTML coverage report
              llvm-cov show ./unit_tests ./integration_tests ./e2e_tests -instr-profile=merged.profdata --format=html -output-dir=coverage_html
            else
              echo "ERROR: No profraw files were generated. Coverage collection failed."
              
              # Debug: Check compiler flags to ensure coverage instrumentation is enabled
              echo "Checking for coverage flags in executables:"
              nm ./unit_tests | grep -i profile
              
              # Debug: Check environment variable
              echo "Current environment:"
              env | grep LLVM
              
              exit 1
            fi

      # Store coverage reports
      - store_artifacts:
          path: build/coverage_html
          destination: coverage_html

workflows:
  version: 2
  clang-checks:
    jobs:
      - clang-format-check
      - build-and-test
      - clang-tidy-check:
          requires:
            - build-and-test 
