version: 2.1

executors:
  clang-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CC: clang
      CXX: clang++

jobs:
  clang-format-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang-format
      - run:
          name: Run clang-format
          command: |
            # Fixed the find patterns to use "*.c", "*.cpp", etc.
            find . -name "*.c" -o -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

  clang-tidy-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-tidy
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang-tidy
      - run:
          name: Run clang-tidy
          command: |
            # Fixed the find patterns here as well
            for file in $(find . -name "*.c" -o -name "*.cpp" -o -name "*.h"); do
              clang-tidy "$file" -- -std=c++17 || exit 1
            done

  build-and-test:
    executor: clang-executor
    steps:
      - checkout

      # Install *all* needed dependencies (including clang) *before* configuring CMake
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update && apt install -y clang build-essential cmake lcov curl zip unzip tar git pkg-config

      - run:
          name: Install vcpkg
          command: |
            git clone https://github.com/microsoft/vcpkg.git
            ./vcpkg/bootstrap-vcpkg.sh
            ./vcpkg/vcpkg integrate install
            
      - run:
          name: Install Google Test via vcpkg
          command: |
            ./vcpkg/vcpkg install gtest --triplet=x64-linux

      - run:
          name: Check Clang++ Installation
          command: |
            which clang++
            clang++ --version

      - run:
          name: CMake Configure (with coverage)
          command: |
            mkdir build
            cd build
            cmake -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake ..
            cd ..

      - run:
          name: Build
          command: |
            cd build
            make -j4

      - run:
          name: Run Tests (JUnit/XML output)
          command: |
            cd build
            # Generate JUnit-style XML test results in Testing/Temporary
            ctest --output-on-failure -T Test --no-compress-output

      - store_test_results:
          path: build/Testing/Temporary

      - run:
          name: Collect Coverage
          command: |
            cd build
            lcov --capture --directory . --output-file coverage.info
            # Optional: filter out system or test files
            lcov --remove coverage.info '/usr/*' 'tests/*' --output-file coverage.info
            lcov --list coverage.info
            mkdir coverage_html
            genhtml coverage.info --output-directory coverage_html

      - store_artifacts:
          path: build/coverage_html
          destination: coverage_html

workflows:
  clang-checks:
    jobs:
      - clang-format-check
      - clang-tidy-check
      - build-and-test
