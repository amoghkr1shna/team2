version: 2.1

executors:
  clang-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CC: clang
      CXX: clang++

jobs:
  # ----------------------------------------------------------------------------
  # 1) Clang-format check job
  # ----------------------------------------------------------------------------
  clang-format-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y clang-format
      - run:
          name: Run clang-format
          command: |
            # Fail if any .c/.cpp/.h file is not formatted
            find . -name "*.c" -o -name "*.cpp" -o -name "*.h" \
              | xargs clang-format --dry-run --Werror

  # ----------------------------------------------------------------------------
  # 2) Clang-tidy check job
  # ----------------------------------------------------------------------------
  clang-tidy-check:
    executor: clang-executor
    steps:
      - checkout
      - run:
          name: Install clang-tidy
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y clang-tidy
      - run:
          name: Run clang-tidy
          command: |
            for file in $(find . -name "*.c" -o -name "*.cpp" -o -name "*.h"); do
              clang-tidy "$file" -- -std=c++17 || exit 1
            done

  # ----------------------------------------------------------------------------
  # 3) Build-and-test job (with gcov coverage)
  # ----------------------------------------------------------------------------
  build-and-test:
    executor: clang-executor
    steps:
      - checkout

      # Install dependencies, including build-essential, cmake, and lcov
      - run:
          name: Install Dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y clang build-essential cmake lcov curl zip unzip tar git pkg-config llvm

      # Install vcpkg
      - run:
          name: Install vcpkg
          command: |
            git clone https://github.com/microsoft/vcpkg.git
            ./vcpkg/bootstrap-vcpkg.sh
            ./vcpkg/vcpkg integrate install

      # Install Google Test via vcpkg
      - run:
          name: Install Google Test via vcpkg
          command: |
            ./vcpkg/vcpkg install gtest --triplet=x64-linux

      # Verify Google Test Installation
      - run:
          name: Verify Google Test Installation
          command: |
            ./vcpkg/vcpkg list | grep gtest

      # Check Clang++ installation
      - run:
          name: Check Clang++ Installation
          command: |
            which clang++
            clang++ --version

      # CMake configuration, enabling coverage flags
      # Note: We explicitly set CFLAGS/CXXFLAGS with coverage flags
      - run:
          name: CMake Configure (with vcpkg, coverage flags)
          command: |
            mkdir build
            cd build
            cmake \
              -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_C_FLAGS="-fprofile-arcs -ftest-coverage" \
              -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage" \
              ..
            cd ..

      # Build the project
      - run:
          name: Build
          command: |
            cd build
            make -j4

      # Run the tests (produces .gcda files)
      - run:
          name: Run Tests (JUnit/XML output)
          command: |
            cd build
            ctest --output-on-failure -T Test --no-compress-output

      # Store test results (JUnit XML)
      - store_test_results:
          path: build/Testing/Temporary

      # --------------------------------------------------------------------
      # Coverage Gathering with gcov/lcov
      # --------------------------------------------------------------------
      - run:
          name: Collect Coverage with lcov
          command: |
            cd build
            # Collect all coverage data (gcda/gcno files) into coverage.info
            lcov --capture --directory . --output-file coverage.info

            # (Optional) Remove external or system paths from coverage
            # lcov --remove coverage.info "/usr/*" "*vcpkg*" "*tests*" --output-file coverage.info

            # Generate HTML report in 'coverage_html' directory
            genhtml coverage.info --output-directory coverage_html

      # Store coverage artifacts (HTML report)
      - store_artifacts:
          path: build/coverage_html
          destination: coverage_html

workflows:
  version: 2
  clang-checks:
    jobs:
      - clang-format-check
      - build-and-test
      - clang-tidy-check:
          requires:
            - build-and-test
